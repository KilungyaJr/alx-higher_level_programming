===============================
 How to Use 7-base_geometry.py
===============================

This library has a class called
``BaseGeometry()``.

Integer Validation
==========================

``BaseGeometry()`` validated value

::

	# importing function from module
	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

	# validating an integer that is > 0
	>>> bg = BaseGeometry()

	>>> bg.integer_validator("my_int", 12)

	>>> bg.integer_validator("width", 89)


Exceptions
===========
Because ,
``BaseGeometry()`` works as below

::

	# when value is not an integer
	>>> bg.integer_validator("name", "John")
	Traceback (most recent call last):
	...
	TypeError: name must be an integer

	# when value is == zero
	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	...
	ValueError: age must be greater than 0

	# when value is < zero
	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	...
	ValueError: distance must be greater than 0

	# missing one argument
	>>> bg.integer_validator("distance")
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	# when value is less than zero
	>>> bg.integer_validator("distance", -4)
	Traceback (most recent call last):
	...
	ValueError: distance must be greater than 0

	# missing two arguments
	>>> bg.integer_validator()
	Traceback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	# too many arguments
	>>> bg.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
        ...
	TypeError: integer_validator() takes 3 positional arguments but 4 were given

	# input as float nan
	>>> bg.integer_validator("NaN", float('nan'))
    	Traceback (most recent call last):
	...
    	TypeError: NaN must be an integer

	# value as a bool
	>>> bg.integer_validator("age", True)
    	Traceback (most recent call last):
	...
    	TypeError: age must be an integer

	# more value not int testcases
	>>> bg.integer_validator("age", {3, 4})
    	Traceback (most recent call last):
	...
    	TypeError: age must be an integer

    	>>> bg.integer_validator("age", None)
    	Traceback (most recent call last):
	...
    	TypeError: age must be an integer

	>>> bg.integer_validator("tuple", (1, 2))
        Traceback (most recent call last):
        ...
        TypeError: tuple must be an integer

	>>> bg.integer_validator("list", [1, 2, 3])
	Traceback (most recent call last):
        ...
        TypeError: list must be an integer

	>>> bg.integer_validator("dict", {"key": "value"})
        Traceback (most recent call last):
        ...
        TypeError: dict must be an integer

	>>> bg.integer_validator("set", {"hello", "world"})
        Traceback (most recent call last):
        ...
        TypeError: set must be an integer

	# area public instance test
	>>> bg.area()
    	Traceback (most recent call last):
	...
    	Exception: area() is not implemented

	# too many arguments for area
	>>> bg.area(1)
	Traceback (most recent call last):
        ...
	TypeError: area() takes 1 positional argument but 2 were given
